---
title: "Lab 13"
author: "Nichelle Camden"
format: html
editor: visual
---

## Background

We will do all of the following:
- DESeq Analysis
- Visualization
- Gene Annotation
- Pathway Analysis

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703


# 1. Read contData and colData

We need at least two tthingss for this type of analysis:
- countData
- colData (aka Metedata)

```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names=1)
#colData
```


```{r}
countData <- read.csv("GSE37704_featurecounts.csv", row.names=1)
#countData
```


# 2. Fix countData
I need to remove the first length column and also heck that the colData and countData match up 

# Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
countData <- as.matrix(countData[,-1])
head(countData)

```


Check to see if they're the same
```{r}
all (rownames(colData) == colnames(countData))
```


We can sum across the row and if we get a zero, we have no counts in any exp for a given gene

```{r}
keep.inds <- rowSums(countData) != 0
counts <- countData[keep.inds,]
```
Check to see how many genes we have left
```{r}
nrow(counts)
```

```{r, message=FALSE}
library(DESeq2)

dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
dds = DESeq(dds)
```

```{r}
res = results(dds)
```

# Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.
```{r}
summary(res)
```


```{r}
plot(res$log2FoldChange, -log(res$padj))
```

# Q. Improve this plot by completing the below code, which adds color and axis labels

```{r}

mycols <- rep("gray", nrow(counts))
mycols[res$log2FoldChange > 2 ]  <- "magenta"
mycols[res$log2FoldChange < -2 ]  <- "blue"
mycols[res$padj > 0.05] <- "darkgray"

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "cyan"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="black")
```
# Quality Control with PCA

The `prcomp()` function in base R is often used to check the difference in samples

```{r}
pca <- prcomp(t(counts), scale = T)
summary(pca)
```

Our PCA score plot (aka PC1 vs PC2)
```{r}
plot(pca$x[,1], pca$x[,2], col = as.factor(colData$condition), pch=16)
#good quality control
```


# 3. DESeq Analysis

```{r, message =F}
library(DESeq2)
```

First, I need to setup the input object required be DESeq
```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = colData,
                              design= ~condition)

dds <- DESeq(dds)
res <- results(dds)

head(res)
```

# 4. Add gene annotation

# Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)

columns(org.Hs.eg.db) #check what columns there are
```


I will use the `mapIDs()` to add SYMBOL and ENTREZID annotation to or results
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
       keys = rownames (counts),
       keytype = "ENSEMBL",
       column = "SYMBOL")
```
and the ENTREZ ID required for the KeGG and GO etc
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
       keys = rownames (counts),
       keytype = "ENSEMBL",
       column = "ENTREZID")
```

```{r}
head(res)
```

# Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.
```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

# 5. Pathways analysis or Gene Set Enrichment

We can use `gage()` withg KEGG and GO

```{r, message=FALSE}
library(gage)
library(gageData)
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

What `gage()` wants as input is that vector of importance - in our case that will be the log2 foldchange values, This vector sgoyld have `names()` that are entrez IDs

get the fold change vector
```{r}
foldchange <- res$log2FoldChange
names(foldchange) <- res$entrez
```

and run gage with KEGG Human set
```{r}
# Get the results
keggres = gage(foldchange, gsets=kegg.sets.hs)
```


```{r}
pathview(gene.data=foldchange, pathway.id="hsa04110")
```


# Gene Ontology

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchange, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```
# Reactome Analysis

We can use the online version for a fancy display
```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```
```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

Then, to perform pathway analysis online go to the Reactome website (https://reactome.org/PathwayBrowser/#TOOL=AT). Select “choose file” to upload your significant gene list. Then, select the parameters “Project to Humans”, then click “Analyze”.

#Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway with the most significant "entities p-value" is the endosomal/ vacuolar pathway.
no, not really
It's unclear why but could be related to differences in analyzing certain subsets over the whole dataset. 
