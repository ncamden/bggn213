---
title: "Class 7: Machine Learning"
author: "Nichelle Camden"
format: html
toc: true
---

# K-means Clustering

Let's make up some data to cluster.

```{r}
tmp <- c(rnorm(30, -3), rnorm(30, 3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

The function to do k-means clustering in base R is called `kmeans()`. We give this our input data for clustering and the number of clusters we want `centers`.

```{r}
km <- kmeans(x, centers = 4, nstart = 20)
km
```

```{r}
km$cluster
```
```{r}
km$centers
```

> Q. plot x colored by the kmeans cluster assignment and add cluster centers as blue points

```{r}
plot(x, col=km$cluster)
points(km$centers, col="blue", pch=15, cex=1.5)
```

# Hierarchical Clusters

The `hclust()` function performs hierarchical clustering. The big advantage here is that I don't need to tell it "k" the number of clusters..

To run `hclust()` I need to provide a distance matrix as input (not the original data).
```{r}
hc <- hclust( dist(x))
hc
```

```{r}
plot(hc)
abline(h=8, col="red", lty= 2)
```

To get my "main" result (cluster membership) I want to "cut" this tree to yield "branches" whos "leaves" are the members of the cluster.
```{r}
cutree(hc, h=8)
```

More often, we will use `cutree()` with k=2 for example
```{r}
grps <- cutree(hc, k=3)
```

Make a plot of our `hclust` results, i.e. our data colored by cluster assignment
```{r}
plot(x, col=grps)
```
# Principal Component Analysis (PCA)

Read data for UK food trends from online

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
x
```

##Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?
```{r}
ncol(x)
nrow(x)
```
There are 5 columns and 17 rows. The food column counts as a column, in addition to the four countries. (before arguing with the url and changing the row names)

```{r}
#View(x)
head(x)
```
```{r}
x[,-1] #shows everything except the first row (food)
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

## Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer to add a row.names argument when calling in the url so that the first row doesn't continually get deleted every time that chunk of code is run. 
```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```


## Q3: Changing what optional argument in the above barplot() function results in the following plot?

Beside = FALSE

## Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

If a point lies on the diagonal line I think that means it has the same value for both axis, so that value is the same or very similar for both countries represented in the plot. (the fold change is equal to 0)
```{r}
pairs(x, col=rainbow(10), pch=16)
```

## Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

Whatever category the dark blue dot represents seems to stand out for Northern Ireland in comparison to the other countries.

##PCA to the rescue!

The main function in base R to do PCA is called `prcomp()`.
One issue with the `prcomp()` functions is that it expects the transpose of our data as input.

```{r}
pca <- prcomp(t(x))
summary(pca)
```

The object returned by `prcomp` has our results that include a $x component. This is our "scores" along the PCs (i.e. the plot of our data along the new PC axis)
```{r}
plot(pca$x[,1], pca$x[,2],
  xlab="PC1", ylab="PC2",
  col=c("orange", "red", "blue", "darkgreen"),
  pch=16)
```



## Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.
```{r}
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], 
     xlab="PC1", ylab="PC2", 
     xlim=c(-270,500), col=c("orange", "red", "blue", "darkgreen"), pch=16)
text(pca$x[,1], pca$x[,2], colnames(x))
```

## Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.
```{r}
plot(pca$x[,1], pca$x[,2], 
     xlab="PC1", ylab="PC2", 
     xlim=c(-270,500), 
     col=c("orange", "red", "blue", "darkgreen"),)
text(pca$x[,1], pca$x[,2], colnames(x), col=c("orange", "red", "blue", "darkgreen"))
```

## Lets focus on PC1 as it accounts for > 90% of variance 
```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```
Northern Ireland consumes less fresh fruit, less alcoholic drinks, and more fresh potatoes than the other countries. 
